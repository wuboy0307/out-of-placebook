subscriptions


user_id
content_id
content_type
timestamps

posts on my wall
Activity.where(activity_source_type: "Post", activity_parent_type: "User",
  activity_parent_id: userid)



likes on my posts


likes on my wall posts

likes on my comments

# likes on my commented on posts

# comments on liked posts
comments on my posts


comments on my wall posts


comments on my parent comments


comments on my commented on posts

# TODO: comment siblings to my comment replies

Activity.where(activity_source_type: "Like", activity_parent_type: "Post",
  activity_parent_id: User.first.posts.map(&:id)).group_by


#

Activity.where(activity_source_type: "Like").select('activity_parent_id', 'MAX(activities.created_at)').group(:activity_parent_id)

Activity.where(activity_source_type: "Like", activity_parent_id: User.first.wall_posts).select(:activity_parent_id, :created_at).order(created_at: :desc).pluck(:activity_parent_id, :created_at).uniq

# Works I think
Activity.where(activity_source_type: "Like").select('activity_parent_id', 'MAX(id)').group('activity_parent_id').order('MAX(id)')
# max(id) not strictly required in select

### BEST ONE YET

Activity.select(:activity_source_type, :activity_parent_type, :activity_parent_id, :created_at).order(created_at: :desc).pluck(:activity_source_type, :activity_parent_type, :activity_parent_id, :created_at).uniq{|el| el[0..2]}
####

Activity.select('activities.*, "likes_on_own_posts" AS type').where(activity_source_type: 'Like', activity_parent_type: 'Post', activity_parent_id: User.first.posts).order(created_at: :desc)
